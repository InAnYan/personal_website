---
title: Implementation of visitor pattern in C++ by using std::variant
authors: Ruslan Popov, Nadiia Karpenko
university: Faculty of Physics, Electronics and Computer Systems, Oles Honchar Dnipro National University, Haharina Ave, 72, Dnipro
abstract: NO ABSTRACT.
keywords: NO KEYWORDS
year: 2023
tags: paper
permalink: "papers/paper2.html"
layout: paper.njk
---

<p>When developing compilers and interpreters, the problem of organizing
and modeling the nodes of an abstract syntax tree (AST) arises. These
programs can perform various actions on the AST. For example, a compiler
can optimize a program (the result of such an action is a new tree), an
interpreter can execute a program, for example, a function can return a
value, but it can also cause side effects, such as changing the state of
an object, outputting information to the console or log file, etc. So,
the problem arises of encoding the tree in such a way that you can
easily add functions to process this tree. This problem is called
“expression problem” in foreign literature <span class="citation"
data-cites="expr_prob">(<span>“Expression Problem”</span>
2013)</span>.</p>
<p>Usually, in object-oriented programming languages such as C++ or
Java, AST is represented as a hierarchy of classes. Methods of working
on this tree are transferred to special classes that implement the
<code>Visitor</code> interface. <code>Visitor</code> is a pattern that
allows you to add new functions to classes without changing them. It
turns out that the data of the AST node and the code that works on it
are divided into two classes: the AST node and the visitor <span
class="citation" data-cites="visitor">(<span>“Visitor in c++ / Design
Patterns”</span> 2023)</span>.</p>
<p>To implement the Visitor pattern in C++, first, an abstract
<code>Visitor</code> class is created in which virtual methods for
working on each node of the AST (<code>visitInteger</code>,
<code>visitBinOp</code>, etc.) are described. After that, certain
functionality is wrapped in a class that implements this interface. Each
AST node must have a virtual <code>accept</code> method to accept a
reference to an instance of the Visitor class and call the visit method
in it, which corresponds to this AST node. This way, all the
functionality of working on the AST is distributed to specific classes,
so there is no need to change the definitions of nodes and you can
easily add new methods.</p>
<p>The disadvantage of this approach is that when adding a new node of
the AST, you need to perform a whole set of actions:</p>
<ul>
<li><p>Create a virtual visit method that corresponds to the new
node;</p></li>
<li><p>Implement the accept method in the node;</p></li>
<li><p>Check the correctness of using types before implementing
them;</p></li>
<li><p>Add new functionality.</p></li>
</ul>
<p>The question arises: can this pattern be reproduced more easily? The
answer to this is given by the C++ standard, which describes a modern
type-safe implementation of the union type (<code>std::variant</code>).
In this case, access to union members is carried out by calling the
<code>std::visit</code> function, which accepts a <code>Callable</code>
object that must contain functions for working with the corresponding
data type stored in <code>std::variant</code> <span class="citation"
data-cites="cpp">(<span>“Std::variant - Cppreference.com”</span>
2023)</span>.</p>
<p>The proposed way to implement the Visitor pattern in C++ is to
represent abstract AST nodes (such as <code>Declaration</code>,
<code>Statement</code>, <code>Expression</code>) using
<code>std::variant</code>. Certain functionality over AST nodes is
implemented as a separate class that contains functions that accept
arguments of all AST nodes.</p>
<p>The advantages of this method are the use of the built-in
capabilities of the C++ language, no need to create a separate
<code>Visitor</code> interface, no need to change the AST nodes and
create an <code>accept</code> method. Creating a new node consists in
creating a separate class and adding it to <code>std::variant</code>.
Since calling the necessary functions to work with the stored data is
implemented automatically using the type system, the programmer is
protected from spelling errors that may occur when writing
<code>visit</code> methods.</p>
<p>But the biggest advantage of the proposed approach is that the
methods that work on the AST can return any type of data. According to
the classical implementation of the Visitor pattern, all
<code>visit</code> functions are virtual, and therefore no template can
be created over them. The optimizer can’t return a new tree, the
interpreter can’t return the result of calculations, so they have to
store all the results in the field of their class.</p>
<p>Our method has several drawbacks that you should pay attention to
before using it:</p>
<ol>
<li><p><code>std::variant</code> is available only from C++17;</p></li>
<li><p><code>std::variant</code> is implemented using template
metaprogramming, so the compiler, in case of any errors in the code, can
generate strange and complex error messages;</p></li>
<li><p><code>Statement</code> or <code>Expression</code> types cease to
be abstract polymorphic classes, instead they become unions, so the
program may use more memory than necessary (but in fact, the Rust and
CPython compilers implement AST in this way);</p></li>
<li><p>you should be careful when creating AST nodes, they cannot be
used inside the <code>std::variant</code> node to which it belongs, as
the classic problem of using a structure inside itself will
arise.</p></li>
</ol>
<p>Thus, in this article, we have compared the classic way of
reproducing a AST in C++ using the Visitor pattern and proposed a new
way of coding this pattern, which is faster to write and provides more
opportunities.</p>
<div id="refs" class="references csl-bib-body hanging-indent"
data-entry-spacing="0" role="list">
<div id="ref-expr_prob" class="csl-entry" role="listitem">
<span>“Expression Problem.”</span> 2013. <a
href="https://wiki.c2.com/?ExpressionProblem">https://wiki.c2.com/?ExpressionProblem</a>.
</div>
<div id="ref-cpp" class="csl-entry" role="listitem">
<span>“Std::variant - Cppreference.com.”</span> 2023. <a
href="https://en.cppreference.com/w/cpp/utility/variant">https://en.cppreference.com/w/cpp/utility/variant</a>.
</div>
<div id="ref-visitor" class="csl-entry" role="listitem">
<span>“Visitor in c++ / Design Patterns.”</span> 2023. <a
href="https://refactoring.guru/design-patterns/visitor/cpp/example">https://refactoring.guru/design-patterns/visitor/cpp/example</a>.
</div>
</div>
